
%%%%%
%%%%%   Testing accuracy obtained through Supervised (SVM) clustering fo each feature


if isfile('/Users/nico/Documents/HCTSA/Analysis/Accuracy_100/Matrix_accuracy_per_feat_SVM/SVM_test_acc.mat') == 1
    load('/Users/nico/Documents/HCTSA/Analysis/Accuracy_100/Matrix_accuracy_per_feat_SVM/SVM_test_acc.mat')
end


%% classification performance for each feature: kmeans for each binary classifier

% Find how many testing epochs for each sleep stage
stgL = size(testMat{1},1);
stgL = stgL/5;          

% Get the indices of testing epochs for each sleep stage
wake = (1:stgL);
N1 = ((stgL+1):(stgL*2));
N2 = ((stgL*2+1):(stgL*3));
N3 = ((stgL*3+1):(stgL*4));
rem = ((stgL*4+1):(stgL*5));

% All binary classifiers for testing 
allpairs = [{[wake;N1]} {[wake;N2]} {[wake;N3]} {[wake;rem]} {[N1;N2]} {[N1;N3]} {[N1;rem]} {[N2;N3]} {[N2;rem]} {[N3;rem]}];

% Parameters for supervised clustering: Find how many training epochs for each sleep stage
stgL_train = size(trainMat{1},1);
idx_train = 1:stgL_train;  
stgL_train = stgL_train/5; 

% Get the indices of training epochs for each sleep stage
wakeT = (1:stgL_train);
N1T = ((stgL_train+1):(stgL_train*2));
N2T = ((stgL_train*2+1):(stgL_train*3));
N3T = ((stgL_train*3+1):(stgL_train*4));
remT = ((stgL_train*4+1):(stgL_train*5));

allpairs_training = [{[wakeT;N1T]} {[wakeT;N2T]} {[wakeT;N3T]} {[wakeT;remT]} {[N1T;N2T]} {[N1T;N3T]} {[N1T;remT]} {[N2T;N3T]} {[N2T;remT]} {[N3T;remT]}];

%%%% For each feature, each iteration and each classifier 

for Nit = 1:length(testMat)    % for each iteration

    for C = 1:10               % For each binary classifier      
            
        % Choose one classifier with testing epochs
        classifier = allpairs{C}; 

        % Choose one classifier with training eopchs (used for supervised clustering)
        stages_SVMtrain = allpairs_training{C};


        %% Supervised: SVM for each feature and each classifier (use the labels to create a prediction model that classifies epochs)

        % Get training epoch ID for both stages of the classifier
        stagesSVM1_train = stages_SVMtrain(1,:);
        stagesSVM2_train = stages_SVMtrain(2,:);

        stages_SVMtrain = [stagesSVM1_train stagesSVM2_train];

        % Get testing epoch indices for both stages of the classifier
        stageSVM1 = classifier(1,:);    
        stageSVM2 = classifier(2,:); 

        stagesSVM = [stageSVM1 stageSVM2];

        % Generate the right labels for training (1s and 2s)
        stages_train = [ones(1,stgL_train) 2*ones(1,stgL_train)];

        % Generate the right labels for testing (1s and 2s)
        stages = [ones(1,stgL) 2*ones(1,stgL)];  % vector of 1s and 2s (used later for kmeans)


        % hctsa response of training epochs (will be used to train algo)
        hctsa_SVMresp1 = trainMat{Nit}(stagesSVM1_train,:);  
        hctsa_SVMresp2 = trainMat{Nit}(stagesSVM2_train,:);

        hctsa_SVMresp = [hctsa_SVMresp1;hctsa_SVMresp2];   % 1:11: hctsa resp from stage1, then 12:22 from stage2

        % SVM for binary classification: first half of hctsa_SVMresp is hctsa responses
        % associated with Stage1, second half is hctsa responses
        % associated with Stage2. The model will then associate Stage1 and
        % Stage2 to their specific hctsa responses
        % 1 SVM model per classifier, because we take different training
        % epochs (depending on which classifier is used
        SVMModel{C} = fitcsvm(hctsa_SVMresp,stages_train);  

        % Get the decisions generated by SVM model for the training and
        % testing data
        svmTrain(:,C) = predict(SVMModel{C}, trainMat{Nit}(stages_SVMtrain,:));  % how SVM classifies training epochs used to create the model
        svmTest(:,C) = predict(SVMModel{C}, testMat{Nit}(stagesSVM,:));       % how SVM classifies new epochs (testing epochs) based on training

        % Re-store these variables
        stats.svmPredictTrain(C, :) = svmTrain(:,C)';  
        stats.svmPredictTest(C, :) = svmTest(:,C)';

        % Get the original labels (How the SVM is supposed to label if it is perfect)
        stats.scoredTrain = stages_train;  
        stats.scoredTest = stages;   

        % Calculate the percentage of correctly labelled training and testing epochs
        iteration_svm_training_accuracy(C,Nit) = (((sum((stats.scoredTrain == stats.svmPredictTrain(C,:))'))/size(stats.scoredTrain, 2))')*100;
        iteration_svm_testing_accuracy(C,Nit) = (((sum((stats.scoredTest == stats.svmPredictTest(C,:))'))/size(stats.scoredTest, 2))')*100;
  
           
    end
    

end


% Get the mean SVM testing accuracy for each classifier (for Feature X)

for Cl = 1:10   % For each of the 10 classifiers
    iteration_svm_testing_accuracy_MEAN(Cl,FF) = mean(iteration_svm_testing_accuracy(Cl,:));  
end
    
% Save into variable, so that it is used for next feature
fpath = '/Users/nico/Documents/HCTSA/Analysis/Accuracy_100/Matrix_accuracy_per_feat_SVM';
save(fullfile(fpath,'SVM_test_acc.mat'),'iteration_svm_testing_accuracy_MEAN')  

FF

  



